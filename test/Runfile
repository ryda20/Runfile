#!/bin/bash
source ${RF_DIR:-~/.Runfile}/Runfile.template # MUST_START_OF_FILE
##regison USER ===================================================

_fn_str_prefix() {
	local str=${1}
	local prefix=${2}

	[[ "${str}" == ${prefix}* ]] && echo "yes"
		# [[ $a == z* ]]   # True if $a starts with a "z" (wildcard matching).
		# [[ $a == "z*" ]] # True if $a is equal to z* (literal matching).
}

step() {
	# rf_log_step_title "step log test" "this is a function to test step log"
	rf_log_step "step log test"
	rf_log_step "Step 1: update packages ...."
	for i in $(seq 1 5); do 
		sleep 1
		log "updating package: $i"
	done
	rf_log_step_result "okay, done"
	rf_log_step "Step 2: compiling ...."
	for i in $(seq 1 5); do 
		sleep 1
		log "compiling package: $i"
	done
	rf_log_step "result: okay, done"
	rf_log_step "Step 3: installing ...."
	for i in $(seq 1 5); do 
		sleep 1
		log "installing package: $i"
	done
	rf_log_step_result "Finished"
	rf_log_step_reset
	rf_log_end
}

ex1() {
	log_title --title "Example" "
Description:
	Description about build function run build arg1 arg2 arg3
Params:
	\$1: param 1 detail
		2tab
			3tab
				4tab
	\$2: param 2 detail
	\$3: param 3 detail
Note:
	Some note about this fn
"
}


ex2() {
	local cmd=${1}; shift
	local args=${@}
	# log "cmd: ${cmd}, args: ${args}"
	case ${cmd} in
	gen)
		_rf_ex2_gen ${args}
		;;
	clear | clean)
		_rf_ex2_clean ${args}
		;;
	*)
		log_title --title "available cmd(s)" "
	rf_ex2 gen [, go_out_dir = pb [, js_out_dir = pb [, proto_dir = .]]]
		=> generate go/js/ts files from .proto files.
	rf_ex2 clear|clean [, go_dir = pb [, js_dir = pb]]
		=> rm all .go, .js, .ts files from input directories
		"
		;;
	esac
}


exitcode() {
	echo "this task will failed"
	( exit 33 ) # return exit code without close shell - actualy exit sub shell
}

# test variable scope
# -> varialbe x can be change inside tt function and sub function
# but outside is not change, it like inside function it create another 
# variable x after the line: x="first"
x="out"
tt() {
	echo -e "[tt] init: x=$x"
	x="first"
	echo -e "[tt] changed: x=$x"
	tt1() {
		echo -e "\t[tt1] x=$x"
		x="second"
		echo -e "\t[tt1] =$x"
	}
	tt1
	echo -e "[tt]=$x => changed inside: $( [[ "$x" == "out" ]] && echo "no" || echo "yes" )"
}
tt_check() {
	echo -e "changed outside? $( [[ "$x" != "out" ]] && echo "no" || echo "yes" )"
}

tt2() {
	echo -e "[tt2] init: x=$x"
	local x="first"
	echo -e "[tt2] changed: x=$x"
	tt22() {
		echo -e "\t[tt22] x=$x"
		x="second"
		echo -e "\t[tt22] =$x"
	}
	tt22
	echo -e "[tt2]=$x => changed: $( [[ "$x" == "out" ]] && echo "no" || echo "yes" )"
}

fn2() {
	# declare - Set variable values and attributes
	# 	NAME
	# declare - Set variable values and attributes.
	# SYNOPSIS
	#
	# declare [-aAfFgilnrtux] [-p] [name[=value] ...]
	# DESCRIPTION
	#
	# Set variable values and attributes.
	# Declare variables and give them attributes. If no NAMEs are given, display the attributes and values of all variables.
	#
	# Options:
	#
	# -f
	# restrict action or display to function names and definitions
	# -F
	# restrict display to function names only (plus line number and source file when debugging)
	# -g
	# create global variables when used in a shell function; otherwise ignored
	# -p
	# display the attributes and value of each NAME
	# Options which set attributes:
	#
	# -a
	# to make NAMEs indexed arrays (if supported)
	# -A
	# to make NAMEs associative arrays (if supported)
	# -i
	# to make NAMEs have the ‘integer’ attribute
	# -l
	# to convert NAMEs to lower case on assignment
	# -n
	# make NAME a reference to the variable named by its value
	# -r
	# to make NAMEs readonly
	# -t
	# to make NAMEs have the ‘trace’ attribute
	# -u
	# to convert NAMEs to upper case on assignment
	# -x
	# to make NAMEs export
	# Using ‘+’ instead of ‘-’ turns off the given attribute.
	#
	# Variables with the integer attribute have arithmetic evaluation (see the let command) performed when the variable is assigned a value.
	#
	# When used in a function, declare makes NAMEs local, as with the local command. The ‘-g’ option suppresses this behavior.
	#
	# Exit Status:
	# Returns success unless an invalid option is supplied or a variable assignment error occurs.

	declare a b c
	a=foo
	b=bar
	c=baz

	foo () {
		echo "1. From within func:"
		declare -p a
		declare -p b
		declare -p c


		local a=1 b=2 c=3

		echo "2. From within func:"
		declare -p a
		declare -p b
		declare -p c
	}

	foo

	echo "From outside func:"
	declare -p a
	declare -p b
	declare -p c
}

fn2() {
	declare -i a -a b c
	a=foo
	b=(bar)
	c=baz

	foo () {
		local -i a=1 -a b=(2) c=3

		echo "From within func:"
		declare -p a
		declare -p b
		declare -p c
	}

	foo

	echo "From outside func:"
	declare -p a
	declare -p b
	declare -p c
}

test() {
	list="$( find ~/.Runfile/plugins -type f -name 'alias_*_1' -exec echo "{}" \; )"
	cat $list
}
##endregion USER =================================================
__start_app ${@} # MUST_END_OF_FILE
