#!/bin/bash

## Variables ##
NC=$'\001'"$(tput sgr0)"$'\002'

colors[0]=$'\001'"$(tput setaf 0)"$'\002'
colors[1]=$'\001'"$(tput setaf 2)"$'\002'
colors[2]=$'\001'"$(tput setaf 3)"$'\002'
colors[3]=$'\001'"$(tput setaf 190)"$'\002'
colors[4]=$'\001'"$(tput setaf 153)"$'\002'
colors[5]=$'\001'"$(tput setaf 4)"$'\002'
colors[6]=$'\001'"$(tput setaf 5)"$'\002'
colors[7]=$'\001'"$(tput setaf 6)"$'\002'
# colors[8]=$'\001'"$(tput setaf 1)"$'\002'
# colors[9]=$'\001'"$(tput setaf 7)"$'\002'

colors_size=${#colors[@]}
colors_index=0
colors_index_pre=0
random_color=${colors[$colors_index]}  # default color is black

rf_log_prefix=""

rf_log() {
	# some system dont show correctly color, so, i force to use
	_log_prefix_init
	str="${random_color}#"
	if [ -n "${rf_log_prefix}" ]; then str="${str}${rf_log_prefix}"; fi
	echo -e "${str}${@}${NC}"
}

rf_log_header() {
	local str=${1:-""}
	local line_width=${2:-${RF_LINE_WIDTH:-100}}
	_random_color_gen
	str="#### ${str} ####" # we add more text to prefix and suffix
	len=$(( line_width - ${#str} + 1 )) # +1 because we add more # at the end of header
	# $1: len, $2: repeat_string, $3: prefix, $4: suffix
	_repeat ${len} "=" "${random_color}${str}" "#${NC}"
}

rf_log_title() {
	local title=${1:-}
	local content=${2:-""}
	local line_width=${3:-${RF_LINE_WIDTH:-100}}
	local ifs=${4:-$'\n'}

	_log_prefix_init

	echo "line_width: ${line_width}"
	# print out - start - seperated line
	rf_log_header "${title}" ${line_width}
	
	local saveIFS="$IFS"
	IFS=$ifs
	for line in ${content}; do
		# replace tab with 4 spaces, adding "# " on front of line
		line="# $( echo "${line}" | sed "s/\t/    /g" )"
		printf "${random_color}%-$(( line_width +1 ))s#${NC}\n" "$line" # +1 because we add # at end of line
	done
	_repeat ${line_width} "=" "${random_color}#" "#${NC}"
	IFS="$saveIFS"
}

_log_prefix_init() {
	if [ -n "${_log_prefix}" ] && [ ${_log_prefix::1} != "[" ]; then
		_log_prefix="[${_log_prefix}]"
	fi
}

# Repeat given char N times using shell function
# echo options:
# 	-e here enables the interpretation of backslash escapes
# 	-n : this option is used to omit echoing trailing newline 
_repeat() {
	local end=${1:-80}
	local repeat_str="${2:-=}"
	local prefix="${3:-}"
	local suffix="${4:-}"
	# range start at 1
	local range=$(seq 1 ${end})

	# add prefix on start
	echo -en "${prefix}"
	#
	for i in $range; do echo -n "${repeat_str}"; done
	# add suffix on end
	echo -e "${suffix}"
}


_random_color_gen() {
	# generate random color, RANDOM is a bash shell value
	colors_index=$(( RANDOM % colors_size ))
	if [[ ${colors_index} -eq ${colors_index_pre} ]]; then
		colors_index=$(( RANDOM % colors_size ))
	fi
	colors_index_pre=${colors_index}
	random_color=${colors[$colors_index]}
}

# starting
# "$@"
