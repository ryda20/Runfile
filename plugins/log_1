#!/bin/bash

## Variables ##
NC='\033[0m' # No Color
Black='\033[0;30m'
DarkGray='\033[1;30m'
Red='\033[0;31m'
LightRed='\033[1;31m'
Green='\033[0;32m'
LightGreen='\033[1;32m'
BrownOrange='\033[0;33m'
Yellow='\033[1;33m'
Blue='\033[0;34m'
LightBlue='\033[1;34m'
Purple='\033[0;35m'
LightPurple='\033[1;35m'
Cyan='\033[0;36m'
LightCyan='\033[1;36m'
LightGray='\033[0;37m'
White='\033[1;37m'

colors[0]=${Black}
colors[1]=${DarkGray}
colors[2]=${LightGray}
colors[3]=${LightCyan}
colors[4]=${Green}
colors[5]=${LightGreen}
colors[6]=${BrownOrange}
colors[7]=${Yellow}
colors[8]=${Blue}
colors[9]=${LightBlue}
colors[10]=${Purple}
colors[11]=${LightPurple}
colors[12]=${Cyan}
# colors[13]=${LightRed}
# colors[14]=${Red}
# colors[15]=${White}

colors_size=${#colors[@]}
colors_index=0
colors_index_pre=0
random_color=${colors[$colors_index]}  # default color is black

# i want dynamic base on content of user input
line_width=${RF_LINE_WIDTH:-100}

rf_log_prefix=""

rf_log() {
	# some system dont show correctly color, so, i force to use
	_log_prefix_init
	str="${random_color}# "
	if [ -n "${rf_log_prefix}" ]; then str="${str}${rf_log_prefix}"; fi
	echo -e "${str}${@}${NC}"
}

rf_log_header() {
	local str=${1:-""}
	local line_width=${2:-${line_width}}
	# echo "line_width: ${line_width}"

	_random_color_gen
	str="#### ${str} ####" # we add more text to prefix and suffix
	len=$(( line_width - ${#str} + 1 )) # string len = ${#str}, +1: for same len with log_title ( we add more '#'(1 char) for each line )
	# $1: len, $2: repeat_string, $3: prefix, $4: suffix
	_repeat ${len} "=" "${random_color}${str}" "#${NC}"
}

rf_log_title() {
	local title=${1:-}
	local content=${2:-""}
	local format=${3:-"yes"}
	local line_width=${4:-${line_width}}

	local padding=" "
	local tab_len=${RF_TAG_WIDTH:-8}
	local line_1tab=$(( line_width - tab_len ))
	local line_2tab=$(( line_1tab - tab_len ))
	local line_3tab=$(( line_2tab - tab_len ))
	local line_4tab=$(( line_3tab - tab_len ))

	_log_prefix_init
	# print out - start - seperated line
	rf_log_header "${title}" ${line_width}
	
	# print out contents
	# Support to 4 tabs space for now
	# 0. delete empty line first and empty line have tab(s)
	# 1. matching 4tabs and padding 48 characters
	# 2. matching 3tabs (except 4tabs) and padding 56 chars
	# 3. matching 2tabs (except 3tabs) and padding 64 chars
	# 4. matching 1tab  (except 2tabs) and padding 72 chars
	# 5. matching any   (except 1tab)  and padding 80 chars
	#	actually 78 because we add more 2 char '# ',
	#	all above not change because add more 2 chars does not effect to tab
	# 6. matching any and append "#" at the start and end
	if [[ "${format}" == "yes" ]] || [[ "${format}" == "" ]]; then
		content=$(
			sed -e :a \
				-e 's/\n//g' \
				-e "/^[[:blank:]]*$/d" \
				-e "			s/^\t\{4\}.\{1,${line_4tab}\}$/&${padding}/;ta" \
				-e "/^\t\{4\}/! s/^\t\{3\}.\{1,${line_3tab}\}$/&${padding}/;ta" \
				-e "/^\t\{3\}/! s/^\t\{2\}.\{1,${line_2tab}\}$/&${padding}/;ta" \
				-e "/^\t\{2\}/! s/^\t.\{1,${line_1tab}\}$/&${padding}/;ta" \
				-e "/^\t\{1\}/! s/^.\{1,$(( line_width - 2 ))\}$/&${padding}/;ta" \
				-e "s/^.*$/# &#/g" <<< "${content}"
		)
	fi
	echo -e "${random_color}${content}${NC}"

	# print out - end - seperated line
	_repeat ${line_width} "=" "${random_color}#" "#${NC}"
	# make new empty line
	echo
}

_log_prefix_init() {
	if [ -n "${_log_prefix}" ] && [ ${_log_prefix::1} != "[" ]; then
		_log_prefix="[${_log_prefix}]"
	fi
}

# Repeat given char N times using shell function
# echo options:
# 	-e here enables the interpretation of backslash escapes
# 	-n : this option is used to omit echoing trailing newline 
_repeat() {
	local end=${1:-80}
	local repeat_str="${2:-=}"
	local prefix="${3:-}"
	local suffix="${4:-}"
	# range start at 1
	local range=$(seq 1 ${end})

	# add prefix on start
	echo -en "${prefix}"
	#
	for i in $range; do echo -n "${repeat_str}"; done
	# add suffix on end
	echo -e "${suffix}"
}


_random_color_gen() {
	# generate random color, RANDOM is a bash shell value
	colors_index=$(( RANDOM % colors_size ))
	if [[ ${colors_index} -eq ${colors_index_pre} ]]; then
		colors_index=$(( RANDOM % colors_size ))
	fi
	colors_index_pre=${colors_index}
	random_color=${colors[$colors_index]}
}

# starting
# "$@"
