#!/bin/bash

## Variables ##
NC=$'\001'"$(tput sgr0)"$'\002'

colors[0]=$'\001'"$(tput setaf 0)"$'\002'
colors[1]=$'\001'"$(tput setaf 2)"$'\002'
colors[2]=$'\001'"$(tput setaf 3)"$'\002'
colors[3]=$'\001'"$(tput setaf 190)"$'\002'
colors[4]=$'\001'"$(tput setaf 153)"$'\002'
colors[5]=$'\001'"$(tput setaf 4)"$'\002'
colors[6]=$'\001'"$(tput setaf 5)"$'\002'
colors[7]=$'\001'"$(tput setaf 6)"$'\002'
# colors[8]=$'\001'"$(tput setaf 1)"$'\002'
# colors[9]=$'\001'"$(tput setaf 7)"$'\002'

colors_size=${#colors[@]}
colors_index=0
colors_index_pre=0
random_color=${colors[$colors_index]}  # default color is black

rf_debug() {
	if [[ -f "debug.txt" ]]; then
		rf_log "${1}"
	fi
}
_rf_log_tab_replace() {
	echo -e "${1}" | sed 's/\t/    /g'
}

rf_log() {
	local str=${1}
	local prefix=${2:-"# "}
	local suffix=${3:-"#"}
	str=` _rf_log_tab_replace "${str}" `
	# some system dont show correctly color, so, i force to use
	local line_width=${2:-${RF_LINE_WIDTH:-90}}
	# echo "line_width: ${line_width}"
	local padding=$(( line_width - ${#str} - ${#prefix} - ${#suffix} ))
	_repeat $padding " " "${random_color}${prefix}${str}" "${suffix}${NC}"
}

rf_log_header() {
	local str=${1:-""}
	str=` _rf_log_tab_replace "${str}" `
	# local prefix=${2:-"####"}
	# local suffix=${3:-"#"}
	local line_width=${2:-${RF_LINE_WIDTH:-90}}
	# echo "rf_log_header->line_width: ${line_width}"
	_random_color_gen
	str="#### ${str} ####" # we add more text to prefix and suffix
	padding=$(( line_width - ${#str} - 1 )) # -1 because we add more # at suffix
	# echo "padding: ${padding}"
	# $1: len, $2: repeat_string, $3: prefix, $4: suffix
	_repeat ${padding} "=" "${random_color}${str}" "#${NC}"
}

rf_log_title() {
	local title=${1:-""}
	local str=${2:-""}
	str=` _rf_log_tab_replace "${str}" `
	local line_width=${3:-${RF_LINE_WIDTH:-90}}
	local ifs=${4:-$'\n'}

	local prefix="# "
	local suffix="#"

	# re-calculate line_width with prefix and suffix
	line_width=$(( line_width + ${#prefix} + ${#suffix} ))

	local padding=0

	# print out header
	rf_log_header "${title}" ${line_width}
	
	local saveIFS="$IFS" && IFS=$ifs
	for line in ${str}; do
		line="$( _rf_log_tab_replace "${line}" )"
		padding=$(( line_width - ${#line} - ${#prefix} - ${#suffix} ))
		# echo "line len: ${#line}, padding: ${padding}"
		[[ $padding -lt 1 ]] && padding=0
		_repeat ${padding} " " "${prefix}${line}" "${suffix}"
	done
	rf_log_end ${line_width}
	IFS="$saveIFS"
}

rf_log_end() {
	local line_width=${1:-${RF_LINE_WIDTH:-90}}
	local prefix=${2:-"#"}
	local suffix=${3:-"#"}
	
	local padding=$(( line_width - ${#prefix} - ${#suffix} )) # -2 because i want to keep line_width but i was added 2 #
	_repeat ${padding} "=" "${prefix}" "${suffix}"
	# echo # make new line
}

# Repeat given char N times using shell function
# echo options:
# 	-e here enables the interpretation of backslash escapes
# 	-n : this option is used to omit echoing trailing newline 
_repeat() {
	local line_width=${1:-${RF_LINE_WIDTH:-90}}
	local str="${2:-}"
	local prefix="${3:-}"
	local suffix="${4:-}"

	# add prefix on start
	echo -en "${random_color}${prefix}"
	if [[ $line_width -gt 0 ]]; then
		# range start at 1
		local range=$( seq 1 ${line_width} )
		for i in $range; do echo -n "${str}"; done
	fi
	echo -e "${suffix}${NC}"
}

_random_color_gen() {
	# generate random color, RANDOM is a bash shell value
	colors_index=$(( RANDOM % colors_size ))
	if [[ ${colors_index} -eq ${colors_index_pre} ]]; then
		colors_index=$(( RANDOM % colors_size ))
	fi
	colors_index_pre=${colors_index}
	random_color=${colors[$colors_index]}
}

# starting
# "$@"
