#!/bin/bash
RF_DIR=${RF_DIR:-~/.Runfile} # get RF_DIR from ENV or using default value

COLUMN_WIDTH=${RF_COLUMN_WIDTH:-30}
COLUMN_NUMBER=${RF_COLUMN_NUMB:-3}
TIMEFORMAT="Task completed in %3lR"


# only include file end with _1 (enable), _0 (disable)
for f in ${RF_DIR}/plugins/*_1; do
	source ${f}
done


# _fn_format format functions in column mode
_fn_format() {
	local fname=${1:-}
	local idx=${2:-1} # idx is a number of functions for easy view, and use to detect to add new line
	local end_of_array=${3:-""}
	local alias=${4:-""}

	local columnNumber=${COLUMN_NUMBER}
	local columnWidth=${COLUMN_WIDTH}

	if [[ "${alias}" == "alias" ]]; then
		# increase number column if fname is a alias
		# descrease column width
		# remove alias_ prefix, too
		columnNumber=$(( 7 ))
		columnWidth=$(( COLUMN_WIDTH / 3 ))
		fname=$( echo ${fname} | sed 's/^alias_//' )
	fi
	local mod=$(( idx % columnNumber ))
	local newline=""

	if [[ ${mod} -eq 0 ]] && [[ ${idx} -gt 0 ]]; then
		# mod == 0 -> end of row. we add '#' char at the end of current row and at the start of new row
		newline="#\n# "
	fi

	local paddingWidth=${columnWidth}
	if [[ ${mod} -eq 0 ]]; then
		paddingWidth=$(( columnWidth - 3 )) # -3 because we added 3 chars on newline
	fi

	idx=$(( idx + 1 )) # +1 because idx, we want to start at 1 (array start at 0)
	# 
	# checking the last items in which column index. For what? to calculate the paddingWidth
	# We can calculate with modulo: mod = last_idx % colNumb
	# So, the last item will be in column number `mod`. Ex:
	# mod = 0 -> last item in 	last column 		-> padding  = COLUMN_WIDTH 
	# 		1 -> 				first column 		-> 			= COLUMN_WIDTH + COLUMN_WIDTH * (COLUMN_NUMBER - mod)
	#		2 ->				second column 		-> 			= COLUMN_WIDTH + COLUMN_WIDTH * (COLUMN_NUMBER - mod)
	#		3 ->				third column 		-> 			= _same_above_
	# ......
	if [[ "${end_of_array}" == "end_of_array" ]]; then
		mod=$(( idx % columnNumber )) # calculate mod again to find the last item in which column number
		if [[ ${mod} != 0 ]]; then
			# + 3 because: we was added 3 chars at newline (#\n# )
			# + first COLUMN_WIDTH: padding for current column number
			# + COLUMN_WIDTH * padding_column_number: padding for all empty columns after current column
			# + padding_column_number: number of columns need to padding
			padding_column_number=$(( columnNumber - mod ))
			paddingWidth=$(( 3 + columnWidth + columnWidth * padding_column_number + padding_column_number ))
		fi
		str=$(printf "%2d) %-${paddingWidth}s#" ${idx} ${fname})
	else
		str=$(printf "%2d) %-${paddingWidth}s" ${idx} ${fname})
	fi
	
	str="${newline}${str}"
	echo "${str}"
}

# _fn_list_by return a string "func1 func2 func3 ...." with condition input
_fn_list_by() {
	# include_fn is a list of "start_with" string need to be keep in return list
	# if include_fn is empty: mean include all
	# Ex: "keep_me rf_"
	local include_fn=${1:-""} # priority 1
	# exclude_fn is a list of "start_with" string need to be exclude in return list
	# if exclude_fn is empty: mean does not exclude
	# Ex: "_ rf_"
	local exclude_fn=${2:-""} # priority 2
	

	# declare -F return all function name with format: 
	#	declare -F fname1
	#	declare -F fname2
	#	.......
	#	declare -F fnameN
	local _rf_fn_list=$(echo $(declare -F) | sed 's/declare -f //g')
	local str=""
	#
	for f in ${_rf_fn_list}; do
		# check include list
		if [[ -n "${include_fn}" ]]; then
			for i in ${include_fn}; do
				if [[ "${f:0:${#i}}" == "${i}" ]]; then
					str="${str}${f} "
					continue 2 # skip this for and continue on parent for loop
				fi
			done
			continue
		fi
		# check exclude list
		if [[ -n "${exclude_fn}" ]]; then
			for e in ${exclude_fn}; do
				# get the first value in f with len of exclude and then compare to exclude value, skip if it same
				# ex: exclude = "tf_" 		-> len = 3
				#	  f = "tf_log_title"	-> ${f:0:len} = tf_
				if [[ "${f:0:${#e}}" == "${e}" ]]; then continue 2; fi
			done
		fi
		
		# normally case
		str="${str}${f} "
	done
	# return by echo
	echo "${str}"
}

# _fn_list show list of available functions
_fn_list() {
	local include_fn=${1:-""}
	local exclude_fn=${2:-""}
	local title=${3:-"all fn(s)"}
	local alias=${4:-""}

	# list functions, start first row with '# '
	local fnList="# "
	#
	local str=$(_fn_list_by "${include_fn}" "${exclude_fn}")
	local arr=(${str}) # convert string "x y z" to array
	local arr_len="${#arr[@]}"
	local idx=0
	#
	for f in ${arr[@]}; do
		if [[ ${idx} == $(( arr_len - 1)) ]]; then
			str=$(_fn_format ${f} ${idx} "end_of_array" "${alias}")
		else
			str=$(_fn_format ${f} ${idx} "" "${alias}")
		fi
		idx=$(( idx + 1 ))
		fnList="${fnList}${str}"
	done
	
	rf_log_title "${title}" "${fnList}" "no_format"
}


help() {
	local str="
$0 <task> <args>
	or simple (by alias run=$0):
run <task> <args>
"
	rf_log_title "Usage" "${str}"
	#
	_fn_list "rf_" "" "runfile fn(s)"
	_fn_list "alias_" "" "alias fn(s)" "alias"
	_fn_list "" "_ rf_ alias_" "user fn(s)"
}


# __fn_list_check will check input command and validation before execute
# dont change this function name to ensure the app works after you update.
# if you want to change, make sure change in Runfile (time __fn_list_check), too
__fn_list_check() {
	local cmd=${1}; shift
	local args=$@

	# if no input: ${#cmd} -eq 0. Nothing to check 
	# -> show user functions only
	# -> hide functions start with _ and rf_
	if [[ -z "${cmd}" ]]; then
		_fn_list "alias_" "" "alias fn(s)" "alias"
		_fn_list "" "_ rf_ alias_" "user fn(s)"
		exit 0
	fi

	# return user functions and build-in function, exclude internal function (start with _)
	local __fn_list=$(_fn_list_by "" "_")

	# check for alias first, if not have, check for normally function
	# check ${cmd} to see if it available in fn_list
	# note: we add space before and after __fn_list and first_cmd to make sure we are compairing full word
	# because we will go wrong if:
	# ex: __fn_list = "abc edf ght dgr"
	# Case : cmd = ab or df or gr,... -> command will valid (because we use * in comparation)
	# Fix:
	# __fn_list = " abc edf ght dgr "
	# cmd = " search " =>
	# " abc " -> valid, but
	# " ab " -> not valid
	if [[ " ${__fn_list} " == *" alias_${cmd} "* ]]; then
		echo "command \`${cmd}\` is alias"
		# call alias
		alias_${cmd} ${args}
	elif [[ " ${__fn_list} " != *" ${cmd} "* ]]; then
		echo "command \`${cmd}\` is not valid"
		exit 1
	else
		echo "valid command: ${cmd} ${args}"
		${cmd} ${args}
	fi
}



# __start_app must to call this function at the end of user Runfile
__start_app() {
	time __fn_list_check ${@}
}
