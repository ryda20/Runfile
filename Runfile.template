#!/bin/bash
declare -r RF_REPOS_DIR=${RF_REPOS_DIR:-~/.Runfile} # get RF_REPOS_DIR from ENV or using default value
source "${RF_REPOS_DIR}/vars"
source "${RF_REPOS_DIR}/utils"

# only include file end with _1 (enable), _0 (disable)
for f in ${RF_REPOS_DIR}/plugins/*_1; do
	# echo "loading: $f"
	source "${f}"
done

# _fn_list show list of available functions
_fn_list() {
	local list_by=${1:-"user"}
	local title=${2:-"all fn(s)"}
	#
	local SEP=$'\n'
	local arr arr_len=0
	local fname_length_max=0
	#
	[[ -z "${FN_NAME_LIST}" ]] && FN_NAME_LIST=$(echo $( declare -F ) | sed 's/declare -f //g')
	#
	rf_debug "list_by: ${list_by}"
	#
	local saveIFS=$IFS && IFS=$SEP
	for fname in ${FN_NAME_LIST}; do
		if [[ "${list_by}" == "user" ]]; then
			# skip rf_ and alias_
			[[ "${fname:0:3}" == "rf_" ]] && rf_debug "skip fname: ${fname}" && continue
			[[ "${fname:0:6}" == "alias_" ]] && rf_debug "skip fname: ${fname}" &&continue
		else
			# fname != "user" and != list_by -> skip
			[[ "${fname:0:${#list_by}}" != "${list_by}" ]] && rf_debug "skip fname: ${fname}" && continue
		fi
		# remove alias_ prefix if have
		[[ "${fname:0:6}" == "alias_" ]] && fname="$( echo ${fname} | sed 's|alias_||' )" && rf_debug "remove alias_ prefix"
		# add to arr
		arr[${arr_len}]="${fname}"
		arr_len=$(( arr_len + 1 ))
		# check length of fname and change fname_length_max if need
		[[ ${fname_length_max} -lt ${#fname} ]] && fname_length_max="${#fname}"
	done && IFS=$saveIFS
	#
	if [[ ${arr_len} -eq 0 ]]; then
		rf_log "Not found any fn by \"${list_by}\""
		return;
	fi
	#
	local padding=$(( fname_length_max + 8 )) # +8 for more place holding space in row len (because the log will adding some chars)
	local rowX idx=0 fnList=""
	local columns=${RF_COLUMN_NUMB:-3}

	for (( i=0; i < arr_len; i+=columns)); do
		rowX=""
		for (( j=0; j < columns; j++ )); do
			idx=$(( i + j ))
			if (( ${idx} < ${arr_len} )); then
				# -4 because i was add 4 char: "xx) "
				rowX="${rowX}$( printf "%02d) %-$((padding - 4))s" $(( idx + 1 )) "${arr[idx]}" )"
			# else
			# 	rowX="${rowX}$( printf "%-${padding}s" " " )" #  last item in row
			fi
		done
		fnList="${fnList}${rowX}${SEP}"
	done
	fnList="${fnList%${SEP}}" # remove 2 chars at end of string out '\n', or using: ${out%??}
	
	rf_debug "padding: ${padding}, columns: ${columns}, row len: ${rowLen}"
	
	line_width=$(( padding * columns ))
	rf_log_title "${list_by} fn(s)" "${fnList}" ${line_width}
}

_fn_user_list() {
	_fn_list "user"
}
_fn_alias_list() {
	local filter=${1}
	_fn_list "alias_${filter}"
}
_fn_rf_list() {
	local filter=${1}
	_fn_list "rf_${filter}"
}

help() {
	local str="
run <fn_name> <args>
run help alias <prefix>
	=> to show alias fn list only,
	=> prefix: run help alias go -> only show alias start with goxxxx
run help rf
	=> to show internal rf fn only
"
	local cmd=${1}
	local filter=${2}

	[[ "${cmd}" == "alias" ]] && _fn_alias_list "${filter}" && return
	[[ "${cmd}" == "rf" ]] && _fn_rf_list "${filter}" && return

	[[ "${RF_MODE}" == "loop" ]] && _fn_exit_msg
	_fn_rf_list
	_fn_alias_list
	_fn_user_list
}


# __fn_list_check_normal will check input command and validation before execute
# run with command: `run task args`
__fn_list_check_normal () {
	local cmd="${1}";shift
	local args="$@"

	# if no input: ${#cmd} -eq 0. Nothing to check 
	# -> show user functions only
	# -> hide functions start with _ and rf_ and alias_
	if [[ -z "${cmd}" ]]; then
		_fn_user_list
		return
	fi
	
	# check if the ${cmd} available or not (build-in command or user command, functions, alias function)
	# https://stackoverflow.com/questions/592620/how-can-i-check-if-a-program-exists-from-a-bash-script
	# check if $cmd is a valid command
	if [[ -n $( command -v ${cmd} ) ]]; then
		# execute the command with args
		eval ${cmd} "${args}"
	elif [[ -n $( command -v alias_${cmd} ) ]]; then
		# execute alias function with args
		eval alias_${cmd} "${args}"
	else
		echo "command \"${cmd}\" couln't be found!"
	fi
	
}

_fn_exit_msg() {
	local msg="
	Runfile comes with ABSOLUTELY NO WARRANTY!
	q: quit \t r: reload session \t h: go working dir"
	rf_log_title "cmd(s)" "${msg}"
}


_fn_reload() {
	clear
	cd $RF_WORKING_DIR
	exec bash -c "${RF_WORKING_DIR}/Runfile loop"
}

# __fn_list_check_loop will check input command and validation before execute
# run with command: `run`, then user can call task by type `task_name args`
__fn_list_check_loop() {
	#
	_fn_exit_msg

	declare cmd args
	
	#
	local path path_now path_pre
	__path_auto_format(){
		path_now=$( pwd )
		if [[ "${path_pre}" != "${path_now}" ]]; then
			path_pre="${path_now}"
			path=${path_now}
			path="$( echo "${path_now}" | sed -e "s@$HOME@~@g" )"
			path="${RF_GREEN}$( basename ${path} ) "
			# path="${RF_GREEN}$( _fn_short_dir "${path}" ) "
		fi
	}
	
	#
	_fn_short_dir() { 
		local path=${1:-""}
		local replace_home_path=${2:-"yes"}
		local keep=${3:-1}
		
		if [[ -z "${path}" ]]; then return; fi

		# [[ "${path}" == "$HOME" ]] && echo "~"; return
		 
		if [[ "${replace_home_path}" == "yes" ]]; then
			path=$( echo "${path}" | sed "s@$HOME@~@g" )
		fi
		
		dir=${path%/*} # remove /* at the end of $1 - like dirname function do
		last=${path##*/} # remove */ at the first of $1 - like basename function do

		# ${dir//\// } => # replace / with " " -> //find_string/replace_string
		# ${dir} | sed "s|/| |g" => # replace / witt " "
		res=$(
			for i in ${dir//\// } ; do
				# echo out $keep chars from first one and dont make newline (-n)
				echo -n "${i:0:${keep}}/";
			done
		)                                                                                                                                                                                                            
		echo "$res$last"                                                                                                                                                                                                                                                         
	}
	_fn_in_working_dir() {
		[[ $( pwd ) == ${RF_WORKING_DIR}* ]] && echo "yes"
		# [[ $a == z* ]]   # True if $a starts with a "z" (wildcard matching).
		# [[ $a == "z*" ]] # True if $a is equal to z* (literal matching).
	}
	#
	_fn_rf_dir() {
		# h: stand for home working directory
		if [[ "$( pwd )" == "${RF_WORKING_DIR}" ]]; then
			echo "h"
		elif [[ -n "$( _fn_in_working_dir )" ]]; then
			echo $( pwd ) | sed "s|^${RF_WORKING_DIR}|h|"
		else
			local p=$( echo "${RF_WORKING_DIR}" | sed "s@$HOME@~@g" )
			p=$( _fn_short_dir "${p}" )
			echo "${p}"
		fi
	}
	#
	
	_fn_arrow_red() {
		echo "${RF_RED}➜ [$( _fn_rf_dir )] "
	}
	_fn_arrow_green() {
		echo "${RF_GREEN}➜ [$( _fn_rf_dir )] "
	}
	local arrow="$( _fn_arrow_green )"
	__arrow_auto_set() {
		[[ $? -gt 0 ]] && arrow="$( _fn_arrow_red )" || arrow="$( _fn_arrow_green )"
	}
	#
	_fn_git_dir_exist() {
		if [[ -z "${RF_GIT}" ]]; then
			return
		fi
		if [[ -d "$( pwd )/.git" ]]; then
			echo "yes"
		elif [[ -n "$( _fn_in_working_dir )" ]] && [[ -d "${RF_WORKING_DIR}/.git" ]]; then
			echo "yes"
		fi
	}
	_fn_git_info_start() {
		[[ -n "$( _fn_git_dir_exist )" ]] && echo "${RF_BLUE}git:("
	}
	_fn_git_info_mid(){
		[[ -n "$( _fn_git_dir_exist )" ]] && echo "${RF_RED}$( git rev-parse --abbrev-ref HEAD )"
	}
	_fn_git_info_end() {
		[[ -n "$( _fn_git_dir_exist )" ]] && echo "${RF_BLUE}) "
	}
	_fn_git_status() {
		[[ -z "$( _fn_git_dir_exist )" ]] && echo -n "" || echo "$( [[ -n "$(git status --porcelain --untracked-files=no --ignore-submodules=dirty | tail -n 1)" ]] && echo "${RF_RED}✗ " || echo "${RF_GREEN}✔ " )"
	}

	local final_sign=$( if [[ "$USER" != "root" ]]; then echo "${RF_BLUE}\$"; else echo "${RF_RED}\#"; fi )
	
	
	local runfilebk="/tmp/RunfileBk"
	local autoreload=${RF_AUTO_RELOAD:-"yes"}
	if [[ "${autoreload}" == "yes" ]]; then
		rm -rf "${runfilebk}"
		cp "${RF_WORKING_DIR}/Runfile" "${runfilebk}"
	fi

	while true ; do

		# check if Runfile changed
		if [[ "${autoreload}" == "yes" ]] && [[ "${RF_WORKING_DIR}/Runfile" -nt "$runfilebk" ]]; then
			_fn_reload
		fi

		__path_auto_format

		#make sure IFS is default for read command run correctly
		IFS=$IFS_ORI
		
		# below is work ok
		read -e -p "${RF_BRIGHT}${arrow}${path}$( _fn_git_info_start )$( _fn_git_info_mid )$( _fn_git_info_end )$( _fn_git_status )${final_sign}${RF_NORMAL} " cmd args
		case $cmd in
			q) exit 0;;
			r) _fn_reload;;
			rr)
				# local reinstall - for dev only
				rf_update "local"
				_fn_reload
				;;
			h) cd $RF_WORKING_DIR;;
			*)
				# if no input: ${#cmd} -eq 0. Nothing to check 
				# -> show user functions only
				# -> hide functions start with _ and rf_ and alias_
				[[ -z "${cmd}" ]] && time _fn_user_list && continue
				
				# check if the ${cmd} available or not (build-in command or user command, functions, alias function)
				# https://stackoverflow.com/questions/592620/how-can-i-check-if-a-program-exists-from-a-bash-script
				# check if $cmd is a valid command
				if [[ -n $( command -v ${cmd} ) ]]; then
					# execute the command with args
					time eval ${cmd} "${args}"
				elif [[ -n $( command -v alias_${cmd} ) ]]; then
					# execute alias function with args
					time eval alias_${cmd} "${args}"
				else
					echo "command \"${cmd}\" couln't be found!"
					# set $? - return code without exit shell
					# actually it run in subshell and exit subshell
					( exit 1 ) 
				fi
		esac
		__arrow_auto_set
	done
}

_fn_list_all() {
	
	local SEP=$'\n'

	# declare -F return all function name with format: 
	#	declare -F fname1
	#	declare -F fname2
	#	.......
	#	declare -F fnameN
	FN_NAME_LIST=$(echo $( declare -F ) | sed 's/declare -f //g')
	
	local str=""
	local aliasfile description
	#
	IFS=$IFS_ORI
	for f in ${FN_NAME_LIST}; do
		[[ "${f:0:1}" == "_" ]] && continue
		if [[ "${f:0:6}" == "alias_" ]]; then
			# how?
			# find a alias file in plugins dir and echo it path to cat out content,
			# then send to sed and find the matching, remove the matching part,
			# then print out (by -n and p) the description
			if [[ -z "${ALIAS_FILE_LIST}" ]]; then ALIAS_FILE_LIST="$(_fn_get_alias_files)"; fi
			description="$( cat ${ALIAS_FILE_LIST} | sed -n "s|^#${f}: ||p" )"
			[[ -n ${description} ]] && f="${f} (${description})"
			description=""
		fi
		#
		str="${str}${f}${SEP}"
	done
	# return string
	echo "${str}"
}

# __start_app must to call this function at the end of user Runfile
__start_app() {
	# load all load function (not include nested functions) into variable and remove fn start with "_"
	# on first load
	FN_NAME_LIST=$(_fn_list_all)
	# echo "${FN_NAME_LIST}"
	# check update
	[[ "${RF_AUTO_UPDATE}" == "yes" ]] && rf_check_update
	
	# force loop mode: run with command: `run loop`
	[[ "${1}" == "loop" ]] && rf_log "forcing running in loop mode" && RF_MODE="loop"
	

	local mode=${RF_MODE:-"loop"}
	if [[ "${mode}" == "loop" ]]; then
		__fn_list_check_loop
		return
	fi
	# normally mode
	time __fn_list_check_normal "$@"
}
