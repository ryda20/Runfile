#!/bin/bash

_fn_str_prefix() {
	local str=${1}
	local prefix=${2}

	[[ "${str}" == ${prefix}* ]] && echo "yes"
		# [[ $a == z* ]]   # True if $a starts with a "z" (wildcard matching).
		# [[ $a == "z*" ]] # True if $a is equal to z* (literal matching).
}

# rf_check_update will check if it available in new verion
rf_check_update() {
	rf_log_prefix="update"
	rf_log "function is not implemented yet"
}

# _rf_update run update runfile
rf_update() {
	local mode="${1}"
	local dir="${2:-.}"
	if [[ "${mode}" == "local" ]]; then
		#local install
		${dir}/install.sh local
	else
		sh ${RF_REPOS_DIR:-~/.Runfile}/install.sh update
	fi
}

rf_str_to_arr() {
	local str=${1}
	local sep=${2:-$' '}
	# x=$'Some\nstring'
	# readarray -t y <<<"$x"
	# Or, if you don't have bash 4, the bash 3.2 equivalent:
	# IFS=$'\n' read -rd '' -a y <<<"$x"
	# You can also do it the way you were initially trying to use:
	# y=(${x//$'\n'/ })
	IFS=$sep
	read -rd '' -a y <<< "${str}"
	
}

# rf_copy_ex2 copy rf_ex2 to user Runfile
# wip - not completed
_rf_copy_ex2() {
	if [[ "$(pwd)" == "${RF_REPOS_DIR}" ]]; then
		rf_log "do not copy tmpl fn to template Runfile"
		exit 0
	fi
	
	# cat plugins/rf_ex2_tmpl_1 >> ./Runfile
}
# rf_copy_ex1 copy rf_ex2 to user Runfile
# wip - not completed
_rf_copy_ex1() {
	if [[ "$(pwd)" == "${RF_REPOS_DIR}" ]]; then
		rf_log "do not copy tmpl fn to template Runfile"
		exit 0
	fi
	
	copy=$(cat ${RF_REPOS_DIR}/plugins/rf_ex1_tmpl_1 | sed '/^#!.*$/d')
	echo $copy
	f="./Runfile"
	# still error because in $copy have many special like (), {}, :,....
	cp ${f} ${f}.tmp && \
	sed -e "s|^##endregion USER.*$|\$\{copy\}\n&|" <${f}.tmp >${f} && \
	rm -f ${f}.tmp
	if [[ $? -eq 0 ]]; then
		rf_log "sucessfully"
	else
		rf_log "not sucessfully"
		cp ${f}.tmp ${f}
		rm ${f}.tmp
	fi
}

# rf_dir_recurse loop & print a folder recusively,
# and will return to caller when return value != 0
rf_dir_recurse() {
	local dir=${1:-"."}
	local fnFileCallback=${2:-}
	local fnDirCallback=${3:-}
    for f in "${dir}"/*;do
        if [ -d "${f}" ] && [[ -n "${f}" ]]; then
			if [[ -n ${fnDirCallback} ]]; then
				# call the callback function and pass current directory path to it
				fnDirCallback ${f}
				if [[ $? != 0 ]]; then
					return $?
				fi
			fi
			rf_dir_recurse "${f}"
		elif [ -f "${f}" ] ; then
			if [[ -n ${fnFileCallback} ]]; then
				# call the callback function and pass current directory path to it
				fnFileCallback ${f}
				if [[ $? != 0 ]]; then
					return $?
				fi
			fi
		fi
    done
}
